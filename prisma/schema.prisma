generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// model User {
//   id String @id @default(uuid())

//   // เพิ่มใหม่
//   username    String? @unique
//   avatar      String?
//   cover       String?
//   description String?
//   city        String?
//   school      String?
//   work        String?
//   website     String?

//   name          String?
//   surname       String? // เพิ่มใหม่
//   email         String    @unique
//   password      String?
//   image         String?
//   role          String    @default("member") // Add a role field
//   emailVerified DateTime?
//   accounts      Account[]
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt

//   // เพิ่มใหม่
//   posts                  Post[]
//   comments               Comment[]
//   likes                  Like[]
//   followers              Follower[]      @relation("UserFollowers")
//   followings             Follower[]      @relation("UserFollowings")
//   followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
//   followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
//   blocks                 Block[]         @relation("BlocksSent")
//   blockedBy              Block[]         @relation("BlocksReceived")
//   stories                Story[]
// }

model User {
  id                     String          @id @default(uuid())
  username               String          @unique
  avatar                 String?
  cover                  String?
  name                   String?
  surname                String?
  description            String?
  city                   String?
  school                 String?
  work                   String?
  website                String?
  createdAt              DateTime        @default(now())
  accounts               Account[]
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks                 Block[]         @relation("BlocksSent")
  blockedBy              Block[]         @relation("BlocksReceived")
  stories                Story[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id        String    @id @default(uuid())
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(uuid())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  likes     Like[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
}

model Follower {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
